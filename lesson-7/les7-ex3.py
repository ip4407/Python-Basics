"""
Урок 7.
Задание 3.

Реализовать программу работы с органическими клетками.
Необходимо создать класс Клетка.
В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов:
сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
обычное (не целочисленное) деление клеток, соответственно.
В методе деления должно осуществляться округление значения до целого числа.

Сложение.
Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
Вычитание.
Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
больше нуля, иначе выводить соответствующее сообщение.
Умножение.
Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение
количества ячеек этих двух клеток.
Деление.
Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
количества ячеек этих двух клеток.

В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.

Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n*****.

Подсказка: подробный список операторов для перегрузки доступен по ссылке.

"""


class Cell:

    def __init__(self, cell_count):
        self.cell_count = cell_count

    def __add__(self, other):  # сложение
        # Объединение двух клеток. Число ячеек общей клетки равняtтся сумме ячеек исходных двух клеток.
        return Cell(self.cell_count + other.cell_count)

    def __sub__(self, other):  # вычитание
        # Участвуют две клетки. Операциz выполняtтcz только если разность количества ячеек двух клеток больше нуля,
        # иначе выводится соответствующее сообщение об ошибке.
        sub_cell_count = self.cell_count - other.cell_count
        if sub_cell_count > 0:
            return Cell(sub_cell_count)
        else:
            return f'Ошибка!\nРазность количества ячеек двух клеток меньше нуля.'

    def __mul__(self, other):  # умножение
        # Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества
        # ячеек этих двух клеток.
        return Cell(self.cell_count * other.cell_count)
    
    def __truediv__(self, other):  # деление
        # Создается общая клетка из двух. Число ячеек общей клетки определяется как деление количества
        # ячеек этих двух клеток.
        return Cell(round(int(self.cell_count / other.cell_count), 0))
    
    def make_order(self, cell_count_in_row):
        # Метод принимает экземпляр класса и количество ячеек в ряду.
        # Данный метод позволяет организовать ячейки по рядам.
        # Метод возвращает строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу
        # Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
        self.cell_count_in_row = cell_count_in_row
        remained = self.cell_count
        order_str = ''
        for i in range(int(self.cell_count / self.cell_count_in_row) + 1):
            if remained >= self.cell_count_in_row:
                for j in range(self.cell_count_in_row):
                    order_str += '*'
                order_str += '\n'
            else:
                for j in range(remained):
                    order_str += '*'
            remained -= self.cell_count_in_row
        return order_str


cell1 = Cell(13)
print(f'Клетка_1 = {cell1.cell_count}')
print(cell1.make_order(5))

cell2 = Cell(7)
print(f'Клетка_2 = {cell2.cell_count}')
print(cell2.make_order(3))

cell3 = cell1 + cell2
print(f'Клетка_1 = {cell1.cell_count}, Клетка_2 = {cell2.cell_count}')
print(f'Клетка_3 = Клетка_1 + Клетка_2 = {cell3.cell_count}:')
print(cell3.make_order(6))

cell4 = cell1 - cell2
print(f'Клетка_1 = {cell1.cell_count}, Клетка_2 = {cell2.cell_count}')
print(f'Клетка_4 = Клетка_1 - Клетка_2 = {cell4.cell_count}:')
print(cell4.make_order(4))

cell5 = cell1 * cell2
print(f'Клетка_1 = {cell1.cell_count}, Клетка_2 = {cell2.cell_count}')
print(f'Клетка_5 = Клетка_1 * Клетка_2 = {cell5.cell_count}:')
print(cell5.make_order(10))

cell6 = cell1 / cell2
print(f'Клетка_1 = {cell1.cell_count}, Клетка_2 = {cell2.cell_count}')
print(f'Клетка_6 = Клетка_1 / Клетка_2 = {cell6.cell_count}:')
print(cell6.make_order(2))
